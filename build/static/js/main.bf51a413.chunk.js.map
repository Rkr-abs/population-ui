{"version":3,"sources":["reportWebVitals.js","components/PopulationTable/Title.js","components/PopulationTable/PopulationData.js","components/PopulationTable/index.js","core/config.js","data/populations.js","services/getSummarize.js","components/SummarizedTable/SummarizedData.js","components/SummarizedTable/Title.js","components/SummarizedTable/index.js","App.js","core/context.js","core/actions.js","core/init.js","core/seed.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Title","fields","config","fieldValues","values","className","map","field","PopulationData","populations","population","i","data","key","keys","PopulationRow","PopulationsTable","state","estimate2011","estimate2022","getMaximum","maximum","reduce","acc","cur","max","find","getMinimum","minimum","min","Infinity","Total","getSummarized","maxState","total","minState","SummarizedData","summary","PopulationsSummary","context","App","role","actions","init","seed","Entry","useState","setState","useEffect","updateContext","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf51a413.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n\tif(onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import { map, values } from '@laufire/utils/collection';\nimport { React } from 'react';\n\nconst Title = ({ config: { fields }}) => {\n\tconst fieldValues = values(fields);\n\n\treturn <thead className=\"table\">\n\t\t{map(fieldValues, (field) => <th>{field}</th>)}\n\t</thead>;\n};\n\nexport default Title;\n","import { keys, map } from '@laufire/utils/collection';\nimport { React } from 'react';\n\nconst PopulationRow = ({ data, key, config: { fields }}) =>\n\t<tr key={ key }>\n\t\t{map(keys(fields), (field) => <td> {data[field]} </td>)}\n\t</tr>;\nconst PopulationData = ({ populations, config }) =>\n\t<tbody>\n\t\t{populations.map((population, i) =>\n\t\t\tPopulationRow({ data: population, key: i, config: config }))}\n\t</tbody>;\n\nexport default PopulationData;\n","import { React } from 'react';\nimport Title from './Title';\nimport PopulationData from './PopulationData';\n\nconst PopulationsTable = ({ data: populations, config }) =>\n\t<table className=\"table\">\n\t\t<Title { ...{ config } }/>\n\t\t<PopulationData { ...{ populations, config } }/>\n\t</table>;\n\nexport default PopulationsTable;\n","const config = {\n\tfields: {\n\t\tstate: 'State',\n\t\testimate2011: 'Estimate 2011',\n\t\testimate2022: 'Estimate 2022',\n\t},\n};\n\nexport default config;\n","const populations = [\n\t{\n\t\tstate: 'UttarPradesh',\n\t\testimate2011: 19.98,\n\t\testimate2022: 23.32,\n\t},\n\t{\n\t\tstate: 'Maharashtra',\n\t\testimate2011: 11.23,\n\t\testimate2022: 12.54,\n\t},\n\t{\n\t\tstate: 'Bihar',\n\t\testimate2011: 10.4,\n\t\testimate2022: 12.49,\n\t},\n\t{\n\t\tstate: 'WestBengal',\n\t\testimate2011: 9.12,\n\t\testimate2022: 9.86,\n\t},\n\t{\n\t\tstate: 'MadhyaPradesh',\n\t\testimate2011: 7.26,\n\t\testimate2022: 8.55,\n\t},\n\t{\n\t\tstate: 'TamilNadu',\n\t\testimate2011: 7.21,\n\t\testimate2022: 7.66,\n\t},\n\t{\n\t\tstate: 'Rajashtan',\n\t\testimate2011: 6.8,\n\t\testimate2022: 8,\n\t},\n\t{\n\t\tstate: 'Karnataka',\n\t\testimate2011: 6.1,\n\t\testimate2022: 6.72,\n\t},\n\t{\n\t\tstate: 'Gujarat',\n\t\testimate2011: 6.04,\n\t\testimate2022: 7,\n\t},\n\t{\n\t\tstate: 'Odisha',\n\t\testimate2011: 4.19,\n\t\testimate2022: 4.6,\n\t},\n];\n\nexport default populations;\n","import { reduce } from '@laufire/utils/collection';\n\nconst getMaximum = (populations) => {\n\tconst maximum = reduce(\n\t\tpopulations, (acc, cur) => {\n\t\t\tconst { max } = acc;\n\n\t\t\treturn { max: max < cur.estimate2011 ? cur.estimate2011 : max };\n\t\t}, { max: 0 }\n\t);\n\tconst maximumPopulation = populations.find((population) =>\n\t\tpopulation.estimate2011 === maximum.max);\n\n\treturn maximumPopulation;\n};\n\nconst getMinimum = (populations) => {\n\tconst minimum = reduce(\n\t\tpopulations, (acc, cur) => {\n\t\t\tconst { min } = acc;\n\n\t\t\treturn { min: min > cur.estimate2011 ? cur.estimate2011 : min };\n\t\t}, { min: Infinity }\n\t);\n\tconst minimumPopulation = populations.find((population) =>\n\t\tpopulation.estimate2011 === minimum.min);\n\n\treturn minimumPopulation;\n};\n\nconst Total = (populations) => reduce(\n\tpopulations, (acc, cur) => acc + cur.estimate2011, 0\n);\n\nconst getSummarized = ({ data: populations }) => ({\n\tmaxState: getMaximum(populations).state,\n\tmaximum: getMaximum(populations).estimate2011,\n\ttotal: Total(populations),\n\tminState: getMinimum(populations).state,\n\tminimum: getMinimum(populations).estimate2011,\n\n});\n\nexport default getSummarized;\n","import { React } from 'react';\nimport getSummarized from '../../services/getSummarize';\n\nconst SummarizedData = ({ data: populations }) => {\n\tconst summary = getSummarized({ data: populations });\n\n\treturn <tbody>\n\t\t<tr>\n\t\t\t<td>Maximum</td>\n\t\t\t<td>{summary.maxState}</td>\n\t\t\t<td>{summary.maximum}</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>minimum</td>\n\t\t\t<td>{summary.minState}</td>\n\t\t\t<td>{summary.minimum}</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Total</td>\n\t\t\t<td>-</td>\n\t\t\t<td>{summary.total}</td>\n\t\t</tr>\n\t</tbody>;\n};\n\nexport default SummarizedData;\n","import { React } from 'react';\n\nconst Title = () => <thead>\n\t<tr>\n\t\t<th>category</th>\n\t\t<th>state</th>\n\t\t<th>census</th>\n\t</tr>\n</thead>;\n\nexport default Title;\n","import { React } from 'react';\nimport SummarizedData from './SummarizedData';\nimport Title from './Title';\nconst PopulationsSummary = (context) =>\n\t<div>\n\t\t<h1>Summary</h1>\n\t\t<table>\n\t\t\t<Title/>\n\t\t\t<SummarizedData { ...context }/>\n\t\t</table>\n\t</div>;\n\nexport default PopulationsSummary;\n","import { React } from 'react';\nimport './App.scss';\nimport PopulationsTable from './components/PopulationTable/';\nimport config from './core/config';\nimport populations from './data/populations';\nimport PopulationsSummary from './components/SummarizedTable';\n\nconst App = () =>\n\t<div className=\"App\" role=\"App\">\n\t\t<PopulationsTable { ...{ data: populations, config: config } }/>\n\t\t<PopulationsSummary { ...{ data: populations } }/>\n\n\t</div>;\n\nexport default App;\n","import actions from './actions';\nimport config from './config';\nimport init from './init';\nimport seed from './seed';\n\nconst context = {\n\tactions,\n\tconfig,\n\tinit,\n\tseed,\n};\n\nexport default context;\n","const actions = {};\n\nexport default actions;\n","const init = () => {\n\n};\n\nexport default init;\n","const seed = {};\n\nexport default seed;\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport updateContext from '@laufire/resist';\nimport './index.css';\nimport App from './App';\nimport context from './core/context';\n\nconst Entry = () => {\n\tconst [state, setState] = useState(context.seed);\n\n\tuseEffect(context.init, []);\n\tupdateContext(context, { state, setState });\n\n\treturn App(context);\n};\n\nReactDOM.render(<React.StrictMode>\n\t<Entry/>\n</React.StrictMode>,\ndocument.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}